[env]
VITA_TARGET = "armv7-sony-vita-newlibeabihf"

STATIC_DIR = "static"
CARGO_TARGET_DIR = { script = ["echo ${CARGO_TARGET_DIR:=target}"] }
CARGO_OUT_DIR = "${CARGO_TARGET_DIR}/${VITA_TARGET}/release"

[tasks.vita-build]
private = true
description = "Build the project using `cargo`."
command = "cargo"
# env = {RUSTFLAGS = '-C target-feature=+crt-static'}
args = ["build", "-Z", "build-std=std,panic_abort", "--target=${VITA_TARGET}", "--release", "-vv"]

[tasks.vita-strip]
private = true
description = "Strip the produced ELF executable."
dependencies = ["vita-build"]
command = "arm-vita-eabi-strip"
args = ["-g", '${CARGO_OUT_DIR}/${CARGO_MAKE_CRATE_NAME}.elf']

[tasks.vita-velf]
private = true
description = "Build an VELF executable from the obtained ELF file."
dependencies = ["vita-strip"]
command = "vita-elf-create"
args = ['${CARGO_OUT_DIR}/${CARGO_MAKE_CRATE_NAME}.elf', '${CARGO_OUT_DIR}/${CARGO_MAKE_CRATE_NAME}.velf']

[tasks.vita-eboot-bin]
description = "Build an `eboot.bin` file from the obtained VELF file."
dependencies = ["vita-velf"]
command = "vita-make-fself"
args = ["-s", '${CARGO_OUT_DIR}/${CARGO_MAKE_CRATE_NAME}.velf', '${CARGO_OUT_DIR}/eboot.bin']

[tasks.vita-param-sfo]
private = true
description = "Build the `param.sfo` manifest using with given TITLE and TITLEID."
command = "vita-mksfoex"
args = ["-d", "ATTRIBUTE2=12", "-s", 'TITLE_ID=${VITA_TITLEID}', '${VITA_TITLE}', '${CARGO_OUT_DIR}/param.sfo']

[tasks.vita-manifest]
private = true
description = "List all static resources into a manifest file."
script = [
  'mkdir -p "${CARGO_OUT_DIR}"',
  '''
  if [ -d "${STATIC_DIR}" ]; then
    find "${STATIC_DIR}" -type f > "${CARGO_OUT_DIR}/MANIFEST"
  else
    touch "${CARGO_OUT_DIR}/MANIFEST"
  fi
  '''
]

[tasks.vpk]
description = "Build a VPK distribution of the project executable and resources."
dependencies = ["vita-eboot-bin", "vita-param-sfo", "vita-manifest"]
script_runner = "@rust"
script = [
    '''
    use std::io::BufRead;
    use std::fs::File;
    fn main() {
      let crate_name = env!("CARGO_MAKE_CRATE_NAME");
      let static_dir = env!("STATIC_DIR");
      let out_dir = std::path::PathBuf::from(env!("CARGO_OUT_DIR"));
      let mut cmd = ::std::process::Command::new("vita-pack-vpk");
      cmd.arg("-s").arg(out_dir.join("param.sfo"));
      cmd.arg("-b").arg(out_dir.join("eboot.bin"));
      // Add files from MANIFEST
      if let Ok(file) = File::open(out_dir.join("MANIFEST")) {
          let mut reader = ::std::io::BufReader::new(file);
          let mut lines = reader.lines();
          while let Some(Ok(line)) = lines.next() {
              let p1 = ::std::path::PathBuf::from(line);            // path on FS
              let p2 = p1.strip_prefix(static_dir).unwrap();        // path in VPK
              cmd.arg("--add").arg(format!("{}={}", p1.display(), p2.display()));
          }
      }
      cmd.arg(out_dir.join(format!("{}.vpk", crate_name)))
        .output()
        .expect("command failed.");
    }
    '''
]
