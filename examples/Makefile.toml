extend = "./Makefile.vita.toml"

[env]
VITA_IP = { value = "192.168.1.100", condition = { env_not_set = ["VITA_IP"] } }
VITA_LOG_PORT = { value = "8888", condition = { env_not_set = ["VITA_LOG_PORT"] } }
VITA_FTP_PORT = { value = "1337", condition = { env_not_set = ["VITA_FTP_PORT"] } }
VITA_CMD_PORT = { value = "1338", condition = { env_not_set = ["VITA_CMD_PORT"] } }

VITA_TARGET = "armv7-sony-vita-newlibeabihf"

ARTIFACT = "${CARGO_TARGET_DIR}/${VITA_TARGET}/release/${CARGO_MAKE_PROJECT_NAME}"

# Upload vpk to ux0:/download and open VitaShell
# You then have to manually install the VPK.
[tasks.vita-upload]
script = ['''
    echo destroy | nc ${VITA_IP} ${VITA_CMD_PORT}
    curl -T "${ARTIFACT}.vpk" "ftp://${VITA_IP}:${VITA_FTP_PORT}/ux0:/download/"
    echo launch VITASHELL | nc ${VITA_IP} ${VITA_CMD_PORT}
''']

# Updates the binary of an already installed vpk
[tasks.vita-update]
workspace = false
script = ['''
    echo destroy | nc ${VITA_IP} ${VITA_CMD_PORT}
    curl -T "${CARGO_TARGET_DIR}/${VITA_TARGET}/release/eboot.bin" "ftp://${VITA_IP}:${VITA_FTP_PORT}/ux0:/app/${VITA_TITLEID}/"
    echo launch ${VITA_TITLEID} | nc ${VITA_IP} ${VITA_CMD_PORT}
''']

# Launch the application by it's title id. It must be installed first
[tasks.vita-run]
script = ['''
    echo destroy | nc ${VITA_IP} ${VITA_CMD_PORT}
    echo launch ${VITA_TITLEID} | nc ${VITA_IP} ${VITA_CMD_PORT}
''']

# This can be used in with PrincessLog
[tasks.vita-log]
workspace = false
script = ['''
    nc -k -l -p ${VITA_LOG_PORT}
''']

# Uses vita-parse-core to analyze the latest core dump
[tasks.vita-coredump]
workspace = false
script = ['''
    FILE=$(curl -s "ftp://${VITA_IP}:${VITA_FTP_PORT}/ux0:/data/" | grep psp2core | tail -1 | awk '{print $(NF)}')
    curl "ftp://${VITA_IP}:1337/ux0:/data/$FILE" -o .coredump
    vita-parse-core .coredump "${ARTIFACT}.elf"
''']

[tasks.vita-reboot]
script = ['''
    echo reboot | nc ${VITA_IP} ${VITA_CMD_PORT}
''']